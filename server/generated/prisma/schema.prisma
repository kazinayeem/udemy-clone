// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  name        String
  email       String       @unique
  password    String
  image       String?
  isActive    Boolean      @default(true)
  role        Role         @default(STUDENT)
  description String?
  phone       String?
  bio         String?
  address     String?
  country     String?
  course      Course[]
  enrollment  Enrollment[]
  review      Review[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum Role {
  STUDENT
  ADMIN
  TEACHER
}

model Category {
  id        String   @id @default(cuid())
  name      String
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id        String   @id @default(cuid())
  title     String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  lessons   Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          String    @id @default(cuid())
  title       String
  description String?
  image       String?
  price       Float?
  duration    Int?
  isPublished Boolean   @default(false)
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  lessons     Lesson[]

  courseItemId String?
  level        String?
  language     String?
  reviews      Review[]
  fqa          FQA[]
  user         User?        @relation(fields: [userId], references: [id])
  userId       String?
  enrollments  Enrollment[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  chapterid    String?
  approval     Boolean      @default(false)
  Chapter      Chapter[]
}

model Lesson {
  id          String       @id @default(cuid())
  title       String
  description String?
  isFree      Boolean      @default(false)
  isPublished Boolean      @default(false)
  video       String?
  course      Course       @relation(fields: [courseId], references: [id])
  courseId    String
  attachments Attachment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Chapter     Chapter?     @relation(fields: [chapterId], references: [id])
  chapterId   String?
}

model Attachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FQA {
  id        String   @id @default(cuid())
  question  String
  answer    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enrollment {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  course        Course   @relation(fields: [courseId], references: [id])
  courseId      String
  paymentMethod String?
  status        Boolean  @default(false)
  PaymentId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  approved  Boolean  @default(false)
  comment   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
